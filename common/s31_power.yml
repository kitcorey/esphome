substitutions:
    update_interval: 30s

uart:
  rx_pin: RX
  baud_rate: 4800

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Outlet 1 Button"
    on_press:
      - switch.toggle: fakebutton
  - platform: template
    name: "${name} Running"
    filters:
      - delayed_off: 15s
    lambda: |-
      if (isnan(id(power_sensor).state)) {
        return {};
      } else if (id(power_sensor).state > 3.0) {
        return true;
      } else {
        return false;
      }

switch:
  - platform: template
    name: "${name} Switch"
    optimistic: true
    id: fakebutton
    turn_on_action:
    - switch.turn_on: relay
    - light.turn_on: led
    turn_off_action:
    - switch.turn_off: relay
    - light.turn_off: led
  - platform: gpio
    id: relay
    pin: GPIO12

output:
  - platform: esp8266_pwm
    id: pow_blue_led
    pin:
      number: GPIO13
      inverted: True

light:
  - platform: monochromatic
    name: "${name} Blue LED"
    output: pow_blue_led
    id: led

sensor:
  - platform: wifi_signal
    name: "${name} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${name} Uptime"
  - platform: cse7766
    current:
      name: "${name} Current"
      id: current_sensor
      filters:
        - throttle_average: ${update_interval}
    voltage:
      name: "${name} Voltage"
      id: voltage_sensor
      filters:
        - throttle_average: ${update_interval}
    power:
      name: "${name} Power"
      id: power_sensor
      on_value_range:
        - above: 3.0
          then:
            - light.turn_on: led
        - below: 2.0
          then:
            - light.turn_off: led
      unit_of_measurement: W
      filters:
        - throttle_average: ${update_interval}
    energy:
      name: "${name} Energy"
      id: energy_sensor
      filters:
        - throttle: ${update_interval}
    apparent_power:
      name: "${name} Apparent Power"
      id: apparent_power_sensor
      filters:
        - throttle_average: ${update_interval}
    power_factor:
      name: "${name} Power Factor"
      id: power_factor_sensor
      filters:
        - throttle_average: ${update_interval}
  - platform: total_daily_energy
    name: "${name} Total Daily Energy"
    power_id: power_sensor
    device_class: energy
    state_class: total_increasing

preferences:
  flash_write_interval: 1h
