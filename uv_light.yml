esphome:
  name: uv_light
  platform: ESP8266
  board: esp01_1m
  includes:
    - espsense.h
  libraries:
    - "ESPAsyncUDP"   # do not include if using an ESP32 board or device!
    - "ArduinoJson-esphomelib@5.13.3"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret wifi_domain
  use_address: '192.168.1.97'
  manual_ip:
    static_ip: '192.168.1.97'
    gateway: '192.168.1.1'
    subnet: '255.255.255.0'
    dns1: '192.168.1.70'
    dns2: '192.168.1.80'

# Enable logging
logger:
  baud_rate: 0

uart:
  rx_pin: RX
  baud_rate: 4800

api:

ota:

time:
  - platform: homeassistant
    id: homeassistant_time

sun:
  latitude: !secret latitude
  longitude: !secret longitude

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Outlet 1 Button"
    on_press:
      - switch.toggle: fakebutton
  - platform: template
    name: "uv light Running"
    filters:
      - delayed_off: 15s
    lambda: |-
      if (isnan(id(power_sensor).state)) {
        return {};
      } else if (id(power_sensor).state > 4) {
        // Running
        return true;
      } else {
        // Not running
        return false;
      }

switch:
  - platform: template
    name: "uv light POW Relay"
    optimistic: true
    id: fakebutton
    turn_on_action:
    - switch.turn_on: relay
    - light.turn_on: led
    turn_off_action:
    - switch.turn_off: relay
    - light.turn_off: led
  - platform: gpio
    id: relay
    pin: GPIO12

output:
  - platform: esp8266_pwm
    id: pow_blue_led
    pin:
      number: GPIO13
      inverted: True

light:
  - platform: monochromatic
    name: "uv light Blue LED"
    output: pow_blue_led
    id: led

sensor:
  - platform: wifi_signal
    name: "uv light WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "uv light Uptime"
  - platform: cse7766
    update_interval: 2s
    current:
      name: "uv light Current"
    voltage:
      id: voltage_sensor
      unit_of_measurement: V
      name: "uv light Voltage"
    power:
      name: "uv light POW Power"
      id: power_sensor
      on_value_range:
        - above: 3.0
          then:
            - light.turn_on: led
        - below: 2.0
          then:
            - light.turn_off: led
      unit_of_measurement: W

custom_component:
  # Create ESPSense instance, passing the ID of the sensor it should retrieve
  # power data from
- lambda: |-
    // Define "plugs"
    ESPSensePlug plug1 = ESPSensePlug(id(power_sensor), "50:C7:BF:51:5F:DE", "UV Light", 120.0);
    // Plug1 also measures voltage
    plug1.voltage_sid = voltage_sensor; // ID of voltage sensor
    // Add to ESPSense
    auto sense = new ESPSense();
    sense->addPlug(plug1);
    return {sense};

text_sensor:
  - platform: version
    name: "uv light ESPHome Version"
